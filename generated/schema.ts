// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class RatioUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RatioUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RatioUpdate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RatioUpdate", id.toString(), this);
    }
  }

  static load(id: string): RatioUpdate | null {
    return changetype<RatioUpdate | null>(store.get("RatioUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tx(): string | null {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tx(value: string | null) {
    if (!value) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromString(<string>value));
    }
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get spellAdded(): BigInt | null {
    let value = this.get("spellAdded");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set spellAdded(value: BigInt | null) {
    if (!value) {
      this.unset("spellAdded");
    } else {
      this.set("spellAdded", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalContractSpell(): BigInt | null {
    let value = this.get("totalContractSpell");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalContractSpell(value: BigInt | null) {
    if (!value) {
      this.unset("totalContractSpell");
    } else {
      this.set("totalContractSpell", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalStakedSpell(): BigInt | null {
    let value = this.get("totalStakedSpell");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalStakedSpell(value: BigInt | null) {
    if (!value) {
      this.unset("totalStakedSpell");
    } else {
      this.set("totalStakedSpell", Value.fromBigInt(<BigInt>value));
    }
  }

  get ratio(): BigDecimal | null {
    let value = this.get("ratio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set ratio(value: BigDecimal | null) {
    if (!value) {
      this.unset("ratio");
    } else {
      this.set("ratio", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}
